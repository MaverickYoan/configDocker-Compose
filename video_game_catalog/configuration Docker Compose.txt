Créer une configuration Docker Compose pour une application PHP CRUD avec PostgreSQL et PgAdmin est une excellente manière de gérer une base de données pour un catalogue de jeux vidéos. Voici un exemple de configuration Docker Compose qui inclut les services pour PHP, PostgreSQL et PgAdmin.

Structure des fichiers

Avant tout, assurez-vous d'avoir la structure de fichiers suivante :

```
/video_game_catalog/
│
├── docker-compose.yml
├── Dockerfile
└── src/
    └── index.php
```

Contenu du fichier `docker-compose.yml`

```yaml
version: '3.8'

services:
  app:
    build: .
    ports:
      - "8000:80"
    volumes:
      - ./src:/var/www/html
    depends_on:
      - db

  db:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: your_user
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: game_catalog
    volumes:
      - db_data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - db

volumes:
  db_data:
```

Contenu du `Dockerfile`

Créez un fichier nommé `Dockerfile` dans le répertoire racine (`video_game_catalog/`) et ajoutez le suivant :

```dockerfile
Utiliser l'image de base PHP avec Apache
FROM php:8.0-apache

Installer les extensions nécessaires pour PostgreSQL
RUN docker-php-ext-install pdo pdo_pgsql

Activer mod_rewrite pour Apache
RUN a2enmod rewrite
```

Création d'un fichier de configuration de base

Créez un fichier dans le répertoire `src/` appelé `index.php` avec un exemple de code PHP pour interagir avec votre base de données :

```php
<?php
$host = 'db';
$db   = 'game_catalog';
$user = 'your_user';
$pass = 'your_password';
$dsn = "pgsql:host=$host;dbname=$db";

try {
    $pdo = new PDO($dsn, $user, $pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Exemple d'insertion dans la table games
    $sql = "CREATE TABLE IF NOT EXISTS games (
              id SERIAL PRIMARY KEY,
              title VARCHAR(255) NOT NULL,
              genre VARCHAR(255),
              release_date DATE
            )";
    $pdo->exec($sql);

    // Ajouter un jeu (Ceci est juste un exemple à remplacer par vos propres logiques)
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
        $title = $_POST['title'];
        $genre = $_POST['genre'];
        $release_date = $_POST['release_date'];
       
        $stmt = $pdo->prepare("INSERT INTO games (title, genre, release_date) VALUES (?, ?, ?)");
        $stmt->execute([$title, $genre, $release_date]);
    }

    // Afficher les jeux
    $stmt = $pdo->query("SELECT * FROM games");
    $games = $stmt->fetchAll(PDO::FETCH_ASSOC);
   
    echo '<h1>Catalogue de jeux vidéo</h1>';
    echo '<form method="POST">
            <input type="text" name="title" placeholder="Titre" required>
            <input type="text" name="genre" placeholder="Genre">
            <input type="date" name="release_date">
            <button type="submit">Ajouter un jeu</button>
          </form>';
         
    echo '<ul>';
    foreach ($games as $game) {
        echo '<li>' . htmlspecialchars($game['title']) . ' - ' . htmlspecialchars($game['genre']) . ' (' . htmlspecialchars($game['release_date']) . ')</li>';
    }
    echo '</ul>';
   
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}
```

Instructions pour lancer l'application

1. Ouvrez un terminal et naviguez vers le répertoire `video_game_catalog`.
2. Exécutez la commande suivante pour construire et démarrer les conteneurs :

   ```bash
   docker-compose up --build
   ```

3. Accédez à votre application PHP via votre navigateur à l'adresse `http://localhost:8000`.
4. Accédez à PgAdmin via `http://localhost:5050` en utilisant les informations d'identification suivantes :
   - Email : `admin@admin.com`
   - Mot de passe : `admin`

5. Lorsque vous êtes connecté à PgAdmin, vous pouvez ajouter un nouvel serveur avec les informations suivantes:
   - Nom du serveur : `PostgreSQL`
   - Hôte : `db`
   - Port : `5432`
   - Maintenance DB : `game_catalog`
   - Username : `your_user`
   - Password : `your_password`

Voilà, vous avez maintenant une configuration de catalogue de jeux vidéo en utilisant PHP, PostgreSQL et PgAdmin avec Docker Compose. N'hésitez pas à modifier le code selon vos besoins pour gérer vos données comme vous le souhaitez.

____

Pour ajouter des fonctionnalités de pages d'accueil, de catalogue, de contact et un formulaire pour ajouter de nouveaux jeux avec la possibilité de télécharger des images, nous devons structurer notre application PHP et modifier notre base de données. Voici comment nous pouvons le faire :

Structure des fichiers mise à jour

Nous allons ajouter des fichiers PHP pour chaque page et une structure pour gérer les téléchargements d'images :

 
/video_game_catalog/
│
├── docker-compose.yml
├── Dockerfile
└── src/
    ├── index.php          # Page d'accueil
    ├── catalogue.php      # Page du catalogue
    ├── contact.php        # Page de contact
    ├── add_game.php       # Page d'ajout de jeu
    ├── db.php             # Script pour la connexion à la base de données
    ├── upload/            # Dossier pour stocker les images téléchargées
    │   └── (images)     
    └── style.css          # Fichier CSS pour le style
 

1.  docker-compose.yml  - Pas de changement nécessaire

Vous n’avez pas besoin de modifications dans le fichier  docker-compose.yml .

2.  Dockerfile  - Pas de changement nécessaire

Pas de modifications nécessaires ici non plus.

3.  db.php  - Gestion de la connexion à la base de données

Ajoutez un fichier  db.php  dans le dossier  src/  :

 
<?php
$host = 'db';
$db   = 'game_catalog';
$user = 'your_user';
$pass = 'your_password';
$dsn = "pgsql:host=$host;dbname=$db";

try {
    $pdo = new PDO($dsn, $user, $pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die('Connection failed: ' . $e->getMessage());
}
?>
 

4.  index.php  - Page d'accueil

 
<?php include 'db.php'; ?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Accueil - Catalogue de jeux vidéo</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Bienvenue sur le catalogue de jeux vidéo</h1>
    <nav>
        <a href="catalogue.php">Catalogue</a>
        <a href="add_game.php">Ajouter un jeu</a>
        <a href="contact.php">Contact</a>
    </nav>
</body>
</html>
 

5.  catalogue.php  - Page de catalogue

 
<?php include 'db.php'; ?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Catalogue de jeux vidéo</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Catalogue de jeux vidéo</h1>
    <nav>
        <a href="index.php">Accueil</a>
        <a href="add_game.php">Ajouter un jeu</a>
        <a href="contact.php">Contact</a>
    </nav>
    <h2>Liste des jeux</h2>
    <ul>
        <?php
        $stmt = $pdo->query("SELECT * FROM games");
        while ($game = $stmt->fetch(PDO::FETCH_ASSOC)) {
            echo '<li>' . htmlspecialchars($game['title']) . ' - ' . htmlspecialchars($game['genre']) . ' (' . htmlspecialchars($game['release_date']) . ')</li>';
        }
        ?>
    </ul>
</body>
</html>
 

6.  add_game.php  - Formulaire d'ajout de jeu

 
<?php include 'db.php'; ?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Ajouter un jeu</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Ajouter un jeu</h1>
    <nav>
        <a href="index.php">Accueil</a>
        <a href="catalogue.php">Catalogue</a>
        <a href="contact.php">Contact</a>
    </nav>
   
    <form action="add_game.php" method="POST" enctype="multipart/form-data">
        <input type="text" name="title" placeholder="Titre" required>
        <input type="text" name="genre" placeholder="Genre">
        <input type="date" name="release_date">
        <input type="file" name="image" accept="image/*" required>
        <button type="submit">Ajouter un jeu</button>
    </form>
   
    <?php
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        $title = $_POST['title'];
        $genre = $_POST['genre'];
        $release_date = $_POST['release_date'];
       
        // Gestion de l'upload d'image
        $target_dir = "upload/";
        $target_file = $target_dir . basename($_FILES["image"]["name"]);
        $uploadOk = 1;
        $imageFileType = strtolower(pathinfo($target_file, PATHINFO_EXTENSION));
       
        // Vérifiez si l'image est un vrai fichier image
        $check = getimagesize($_FILES["image"]["tmp_name"]);
        if ($check === false) {
            echo "Ce n'est pas une image.";
            $uploadOk = 0;
        }

        // Vérifiez si le fichier existe déjà
        if (file_exists($target_file)) {
            echo "Désolé, ce fichier existe déjà.";
            $uploadOk = 0;
        }

        // Limiter la taille du fichier
        if ($_FILES
 ...Voir plus

______

si le fichier est au format correct
        if ($imageFileType != "jpg" && $imageFileType != "png" && $imageFileType != "jpeg" && $imageFileType != "gif") {
            echo "Désolé, seul les fichiers JPG, JPEG, PNG & GIF sont autorisés.";
            $uploadOk = 0;
        }

        // Si tout est ok, essayez de télécharger le fichier
        if ($uploadOk == 1) {
            if (move_uploaded_file($_FILES["image"]["tmp_name"], $target_file)) {
                // Insérer les données dans la base de données
                $stmt = $pdo->prepare("INSERT INTO games (title, genre, release_date, image) VALUES (?, ?, ?, ?)");
                $stmt->execute([$title, $genre, $release_date, $target_file]);
                echo "Le jeu a été ajouté.";
            } else {
                echo "Désolé, une erreur s'est produite lors de l'upload de votre fichier.";
            }
        }
    }
    ?>
</body>
</html>
```

d. `contact.php` - Page de contact

Ajoutez également un fond animé à `contact.php` :

```php
<?php include 'db.php'; ?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Contact</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="background"></div>
    <h1>Contactez-nous</h1>
    <nav>
        <a href="index.php">Accueil</a>
        <a href="catalogue.php">Catalogue</a>
        <a href="add_game.php">Ajouter un jeu</a>
    </nav>
    <form method="POST" action="contact.php">
        <input type="text" name="name" placeholder="Votre nom" required>
        <input type="email" name="email" placeholder="Votre email" required>
        <textarea name="message" placeholder="Votre message" required></textarea>
        <button type="submit">Envoyer</button>
    </form>

    <?php
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        // Vous pouvez ajouter ici la logique pour traiter le formulaire de contact
        echo "Merci de nous avoir contactés, nous reviendrons vers vous bientôt!";
    }
    ?>
</body>
</html>
```

Explication des changements

1. CSS Animations : Nous avons ajouté une animation de dégradé simple à l'arrière-plan en utilisant des `@keyframes` CSS. Cela crée un effet de transition de couleur qui change doucement.

2. Élément `<div>` de fond : Un `<div>` avec la classe `background` a été ajouté à chaque page pour appliquer l'effet CSS de fond. Cet élément est placé en dessous des autres éléments de la page (`z-index: -1`).

3. Formulaires de contact et d'ajout de jeux : Chaque page dispose de formulaires appropriés, permettant la soumission de données et l'ajout d'images pour les jeux.

Avec ces changements, vous avez maintenant des pages avec des arrière-plans animés et une interface utilisateur améliorée pour gérer les jeux vidéo dans votre catalogue. Assurez-vous d'ajuster le style selon vos préférences et d'implémenter toute fonctionnalité supplémentaire nécessaire.

-- 